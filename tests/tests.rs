//! API tests for `corncobs`.
//!
//! These are broken into an integration test because:
//!
//! 1. The test fixtures (e.g. `#[test]`) require `std`.
//! 2. There is no way to specify that tests should run with a feature enabled.
//! 3. I don't want to include `std` in the default features because who said
//!    `std` was the default anyhow?

use corncobs::*;

static FIXTURES: &[(&[u8], &[u8])] = &[
    (&[], &[0x01, 0x00]),
    (&[0x00], &[0x01, 0x01, 0x00]),
    (&[0x00, 0x00], &[0x01, 0x01, 0x01, 0x00]),
    (&[0x11, 0x22, 0x00, 0x33], &[0x03, 0x11, 0x22, 0x02, 0x33, 0x00]),
    (&[0x11, 0x00, 0x00, 0x00], &[0x02, 0x11, 0x01, 0x01, 0x01, 0x00]),
];

#[test]
fn check_fixtures() {
    for (i, (input, output)) in FIXTURES.iter().enumerate() { 
        eprintln!("-- fixture {} --", i);
        eprintln!("input: {:x?}", input);
        eprintln!("expected: {:x?}", output);
        let mut actual = vec![0; max_encoded_len(input.len())];

        let n = encode_buf(input, &mut actual[..]);
        actual.truncate(n);

        assert_eq!(&actual[..], *output, "mismatch in test fixture case {}", i);
    }
}

#[test]
fn check_fixtures_iter() {
    for (i, (input, output)) in FIXTURES.iter().enumerate() { 
        let actual: Vec<u8> = encode_iter(input).collect();

        assert_eq!(&actual[..], *output, "mismatch in test fixture case {}", i);
    }
}

const LONG_FIXTURE_1: ([u8; 254], [u8; 254 + 2]) = {
    // Input is:
    // 01 02 ... FD FE
    let mut input = [0; 254];
    let mut i = 0;
    while i < 254 {
        input[i] = (i as u8) + 1;
        i += 1;
    }

    // Output should be:
    // FF 01 02 ... FD FE 00
    let mut output = [0; 254 + 2];
    output[0] = 0xFf;
    let mut i = 0;
    while i < 254 {
        output[i + 1] = (i as u8) + 1;
        i += 1;
    }

    (input, output)
};

const LONG_FIXTURE_2: ([u8; 255], [u8; 255 + 2]) = {
    // Input is:
    // 00 01 02 ... FD FE
    let mut input = [0; 255];
    let mut i = 0;
    while i < 255 {
        input[i] = i as u8;
        i += 1;
    }

    // Output should be:
    // 01 FF 01 02 ... FD FE 00
    let mut output = [0xDE; 255 + 2];
    output[0] = 0x01;
    output[1] = 0xFF;
    let mut i = 1;
    while i < 255 {
        output[i + 1] = i as u8;
        i += 1;
    }
    output[255 + 1] = 0;

    (input, output)
};

const LONG_FIXTURE_3: ([u8; 255], [u8; 255 + 3]) = {
    // Input is:
    // 01 02 ... FE FF
    let mut input = [0; 255];
    let mut i = 0;
    while i < 255 {
        input[i] = i as u8 + 1;
        i += 1;
    }

    // Output should be:
    // FF 01 02 ... FD FE 02 FF 00
    let mut output = [0xDE; 255 + 3];
    output[0] = 0xFF;
    let mut i = 1;
    while i < 255 {
        output[i] = i as u8;
        i += 1;
    }
    output[255] = 2;
    output[255 + 1] = 0xFF;
    output[255 + 2] = 0;

    (input, output)
};

#[test]
fn long_fixtures() {
    let fixtures: &[(&'static [u8], &'static [u8])] = &[
        (&LONG_FIXTURE_1.0, &LONG_FIXTURE_1.1),
        (&LONG_FIXTURE_2.0, &LONG_FIXTURE_2.1),
        (&LONG_FIXTURE_3.0, &LONG_FIXTURE_3.1),
    ];
    for (i, &(input, expected)) in fixtures.iter().enumerate() {
        let mut actual = vec![0; max_encoded_len(input.len())];

        let n = encode_buf(input, &mut actual[..]);
        actual.truncate(n);
        for (j, (&ab, &eb)) in actual.iter().zip(expected).enumerate() {
            assert_eq!(ab, eb,
                "mismatch at fixture {} index {}", i, j);
        }
        assert_eq!(actual.len(), expected.len(),
        "length mismatch in fixture {}", i);

        let mut decoded = vec![0; input.len()];
        decode_buf(&actual, &mut decoded).unwrap();
        assert_eq!(&decoded, &input,
            "round-trip failed for fixture {}", i);
    }
}

#[test]
fn long_fixtures_incremental() {
    let fixtures: &[(&'static [u8], &'static [u8])] = &[
        (&LONG_FIXTURE_1.0, &LONG_FIXTURE_1.1),
        (&LONG_FIXTURE_2.0, &LONG_FIXTURE_2.1),
        (&LONG_FIXTURE_3.0, &LONG_FIXTURE_3.1),
    ];
    for (i, &(input, expected)) in fixtures.iter().enumerate() {
        println!("-- fixture {} --", i);
        let mut decoder = corncobs::Decoder::default();
        let mut input = input.iter();
        for (bi, &byte) in expected.iter().enumerate() {
            println!("{:?} <- {:x}", decoder, byte);
            match decoder.advance(byte) {
                Ok(corncobs::DecodeStatus::Append(db)) => {
                    if let Some(&next_in) = input.next() {
                        assert_eq!(db, next_in, "fixture {} idx {}", i, bi);
                    } else {
                        panic!("decode result longer than fixture");
                    }
                }
                Ok(corncobs::DecodeStatus::Pending) => (),
                Ok(corncobs::DecodeStatus::Done) => {
                    assert_eq!(input.next(), None);
                }
                Err(e) => {
                    panic!("{:?}", e);
                }
            }
        }
    }
}

#[test]
fn incremental1() {
    let mut decoder = corncobs::Decoder::default();
    let input = [4, 0x80, 0x80, 0x80, 0];
    let mut count = 0;
    for byte in input {
        match decoder.advance(byte) {
            Ok(corncobs::DecodeStatus::Append(b)) => {
                count += 1;
                assert_eq!(b, 0x80);
            }
            Ok(corncobs::DecodeStatus::Pending) => (),
            Ok(corncobs::DecodeStatus::Done) => {
                assert_eq!(count, 3);
                return;
            }
            Err(e) => panic!("{:?}", e),
        }
    }

    panic!("did not hit done");
}

#[test]
fn long_fixtures_iter() {
    let fixtures: &[(&'static [u8], &'static [u8])] = &[
        (&LONG_FIXTURE_1.0, &LONG_FIXTURE_1.1),
        (&LONG_FIXTURE_2.0, &LONG_FIXTURE_2.1),
        (&LONG_FIXTURE_3.0, &LONG_FIXTURE_3.1),
    ];
    for (i, &(input, expected)) in fixtures.iter().enumerate() {
        let actual: Vec<u8> = encode_iter(input).collect();

        for (j, (&ab, &eb)) in actual.iter().zip(expected).enumerate() {
            assert_eq!(ab, eb,
                "mismatch at fixture {} index {}", i, j);
        }
        assert_eq!(actual.len(), expected.len(),
        "length mismatch in fixture {}", i);

        let mut decoded = vec![0; input.len()];
        decode_buf(&actual, &mut decoded).unwrap();
        assert_eq!(&decoded, &input,
            "round-trip failed for fixture {}", i);
    }
}

#[test]
fn long_fixture_2_iter() {
    let mut input = [0; 255];
    for i in 0..255 {
        input[i] = i as u8;
    }
    // sequence is 00 01 .. FD FE
    // output should be:
    // 01 FF 01 02 ... FD FE 00
    let mut actual = vec![0; max_encoded_len(input.len())];

    let n = encode_buf(&input, &mut actual);
    actual.truncate(n);
    assert_eq!(actual.len(), input.len() + 2);

    assert_eq!(actual[0], 0x01);
    assert_eq!(actual[1], 0xFF);
    assert_eq!(actual[256], 0);
    assert_eq!(&actual[2..256], &input[1..]);

    let mut decoded = vec![0; input.len()];
    decode_buf(&actual, &mut decoded).unwrap();
    assert_eq!(&decoded, &input);
}

#[test]
fn fixture_round_trip() {
    for (i, (input, _)) in FIXTURES.iter().enumerate() { 
        let mut encoded = vec![0; max_encoded_len(input.len())];
        let n = encode_buf(input, &mut encoded);
        encoded.truncate(n);
        let mut decoded = vec![0; input.len()];
        decode_buf(&encoded, &mut decoded).unwrap();

        assert_eq!(&decoded[..], *input, "mismatch in case {}", i);
    }
}

#[test]
fn fixture_round_trip_in_place() {
    for (i, (input, _)) in FIXTURES.iter().enumerate() { 
        let mut encoded = vec![0; max_encoded_len(input.len())];
        let n = encode_buf(input, &mut encoded);
        encoded.truncate(n);

        let n = decode_in_place(&mut encoded).unwrap();

        assert_eq!(&encoded[..n], *input, "mismatch in case {}", i);
    }
}

#[test]
fn fixme_round_trip() {
    const FIXTURE: &[u8] = &[
        0xcc, 0x19, 0xde, 0x01, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x09, 0xd2, 0x47, 0x13, 0x3a, 0x53, 0x4f, 0x75, 0x6b, 0x18, 0x74, 0x4b, 0xb9, 0x0f,
        0x25, 0xb1, 0x9c, 0x3d, 0xcb, 0x1f, 0xe4, 0x24, 0xd9, 0xcb, 0xbf, 0x00, 0xb3, 0xeb, 0xc3,
        0xd8, 0x26, 0x0d, 0xf2, 0xbb, 0x91, 0xa1, 0x45, 0x05, 0xf9, 0x0c, 0x15, 0x21, 0x1d, 0xa9,
        0xd3, 0xed, 0x58, 0x5a, 0x58, 0x1f, 0x18, 0xa8, 0x93, 0x70, 0x20, 0xe8, 0xca, 0xc7, 0xc7,
        0x43, 0x20, 0x99, 0x3a, 0x6c, 0xf4, 0x1d, 0x44, 0x7c, 0x0d, 0xeb, 0x5f, 0xfb, 0x2b, 0xa6,
        0x9d, 0x1e, 0x83, 0x92, 0x55, 0xf3, 0xac, 0x43, 0x1c, 0x97, 0x01, 0xf9, 0x2d, 0x6d, 0xb2,
        0x2d, 0x81, 0x69, 0xfc, 0x65, 0x99, 0x2d, 0x28, 0x01, 0xa0, 0x10, 0xaf, 0x6c, 0xe7, 0x59,
        0x94, 0x64, 0x4c, 0x28, 0xf3, 0x10, 0xc5, 0x73, 0x39, 0xd7, 0x34, 0x5c, 0xd9, 0xbf, 0xb1,
        0x62, 0x3f, 0x41, 0xd8, 0x05, 0x61, 0x6a, 0x60, 0x5e, 0xe0, 0xf4, 0x82, 0x6a, 0xa4, 0x4a,
        0xf0, 0x3b, 0xbb, 0xc1, 0xff, 0xfc, 0xcd, 0x40, 0xf6, 0xe3, 0xfb, 0x5d, 0x2e, 0xe4, 0xc5,
        0xed, 0x2f, 0x47, 0x50, 0x78, 0xb9, 0x45, 0xa0, 0x68, 0x2b, 0xbf, 0x62, 0x90, 0x47, 0x05,
        0xc7, 0x75, 0x27, 0x1e, 0xb7, 0x6a, 0x61, 0x40, 0x22, 0xab, 0x67, 0x0c, 0x39, 0xfa, 0x06,
        0xc1, 0x80, 0x9d, 0x46, 0xff, 0xbb, 0xf2, 0x81, 0x87, 0x27, 0x6b, 0x6d, 0xb3, 0x31, 0xff,
        0xf4, 0x69, 0xe9, 0x93, 0x69, 0x38, 0x1a, 0xe5, 0x18, 0xc7, 0x8c, 0xd4, 0xee, 0x72, 0x13,
        0x2b, 0x70, 0x77, 0xfa, 0x50, 0x67, 0xd5, 0xc8, 0x1c, 0xab, 0x6d, 0xf8, 0x8f, 0x95, 0xab,
        0xed, 0xa7, 0x83, 0xc8, 0xb8, 0x78, 0xdf, 0xd8, 0x44, 0x7c, 0xf5, 0x54, 0x35, 0x13, 0x67,
        0x36, 0x14, 0x30, 0x8f, 0x72, 0x50, 0xcf, 0x15, 0x06, 0x36, 0xe4, 0x0c, 0x9c, 0xfc, 0x2f,
        0x09, 0xbe, 0x1c, 0x60, 0x46, 0x2f, 0xad, 0x8d, 0x15, 0x1b, 0x31, 0xbf, 0xcb, 0x37, 0xf9,
        0x1c, 0xe6, 0x29, 0x1b, 0xb6, 0xbd, 0x83, 0x81, 0x2f, 0x7e, 0xd7, 0xb4, 0x9a, 0x66, 0x50,
        0x40, 0xe3, 0x75, 0xcd, 0x3d, 0xd5, 0x0c, 0xb4, 0x27, 0xb4, 0xc2, 0xf4, 0x86, 0x2f, 0xd8,
        0xf0, 0xac, 0x34, 0xd8, 0xae, 0xd8, 0x79, 0x61, 0x3d, 0xcc, 0xf8, 0xa0, 0x19, 0xaf, 0x2b,
        0x58, 0xb4, 0x0c, 0x35, 0x37, 0xe8, 0x27, 0xd4, 0x27, 0x36, 0x31, 0x2e, 0xd0, 0xc3, 0x61,
        0x14, 0x95, 0x6a, 0xbd, 0x7a, 0x7c, 0x91, 0x93, 0xa4, 0xb1, 0x05, 0x61, 0x77, 0x0a, 0x67,
        0x29, 0x58, 0xf5, 0x51, 0x7b, 0x75, 0xfa, 0xda, 0xf0, 0x66, 0x3a, 0xa6, 0xfb, 0xde, 0x6a,
        0xff, 0x13, 0xf5, 0xef, 0x64, 0x97, 0x25, 0xbf, 0xd2, 0xd1, 0x0a, 0xb3, 0x54, 0xf6, 0x16,
        0x36, 0x1f, 0xc0, 0xdf, 0x32, 0x13, 0x9a, 0xb7, 0xb8, 0xdd, 0xde, 0x1b, 0x63, 0x36, 0x2c,
        0xf1, 0x77, 0x86, 0xa2, 0x19, 0x3b, 0x3c, 0x1e, 0x37, 0xe4, 0xe4, 0x7f, 0xe3, 0xf3, 0x3e,
        0xd9, 0x74, 0xb9, 0x17, 0xa9, 0x4c, 0x94, 0x21, 0x32, 0x4a, 0x3e, 0x80, 0x10, 0xcb, 0xd5,
        0x90, 0x3e, 0xca, 0xd7, 0x0b, 0xf0, 0x80, 0x9d, 0x3d, 0xb2, 0xbf, 0x9e, 0x16, 0x99, 0xec,
        0xcd, 0x7c, 0xbf, 0xd8, 0x3c, 0xa0, 0x58, 0x5d, 0x04, 0x86, 0xe7, 0x47, 0x94, 0xf9, 0xd6,
        0xa5, 0x99, 0x76, 0x55, 0xdb, 0x45, 0x1c, 0x61, 0x0f, 0x06, 0x90, 0xf7, 0x7f, 0x22, 0xc2,
        0x92, 0x1e, 0x83, 0x2d, 0xa6, 0x62, 0x25, 0x3a, 0xa3, 0x60, 0x79, 0xae, 0x09, 0x66, 0x0f,
        0x58, 0x5f, 0x3c, 0x92, 0xe5, 0x0e, 0x86, 0x06, 0x45, 0xa0, 0xc7, 0x5a, 0xcc, 0xc7, 0xf3,
        0x5d, 0x7c, 0xfc, 0x88, 0x38, 0xa3, 0x97, 0x6f, 0x2d, 0xdf, 0x2b, 0x9e, 0x13, 0x28, 0x2e,
        0x11, 0xaf, 0xf0, 0x60, 0xf5, 0x9b, 0xd8, 0x4e, 0x24, 0x10, 0x28, 0x16, 0xdb, 0xbb, 0xd3,
        0xfd, 0x45, 0x06, 0x61, 0xf0, 0xa8, 0x48, 0x5d, 0x7e, 0x93, 0x00, 0x43,
    ];

    let mut out = vec![0; max_encoded_len(FIXTURE.len())];
    let n = encode_buf(FIXTURE, &mut out);
    let m = decode_in_place(&mut out[..n]).unwrap();
    assert_eq!(FIXTURE, &out[..m]);
}
